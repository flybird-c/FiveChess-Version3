功能：
    基本功能
        1.界面跳转
        2.棋盘绘制
        3.背景音乐
        4.落子
        5.落子声音
        6.悔棋
        7.认输
        8.存档
        9.读档
    扩展功能
        1.游戏设置
            1.1 关闭背景音乐
            1.2 调整音量
        2.AI人工算法

架构（设计下有哪些类，哪些包，类关系，类的内容）
    继承(泛化Generalization)  is - a
    实现(Realization)        like - a
    依赖(Dependency)  use - a  使用关系
        依赖关系指两个相对独立的对象，当一个对象负责构造另一个对象的实例，或者依赖另一个对象的服务时，
        这两个对象之间主要体现为依赖关系。在Java中，类A当中使用了类B，其中类B是作为类A的方法参数、
        方法中的局部变量、或者静态方法调用。
    关联(Association)   has - a  拥有关系
        关联关系指一个类的实例A使用另外一个类的实例B，这两个对象之间为关联关系，关联关系分为单项关联和双向关联。
        在Java中，单向关联表现为：类A当中使用了类B，其中B作为类A的成员变量。双向关联表现为：类A当中使用了类B作为成员变量；
        同时类B中也使用了类A作为成员变量。
    聚合(Aggregation)    contains - a 包含
        聚合关系是关联关系的一种，耦合度强于关联，他们的代码表现是相同的，仅仅是在逻辑上有所区别：关联关系的对象间是相互独立的，
        而聚合关系的对象之间存在着包容关系，他们之间是“整体-个体”的相互关系。部分脱离整体可以独立存活
    组合(Compostion)
        组合关系相比于聚合，组合是一种耦合度更强的关联关系。存在组合关系的类表示“整体-部分”的关联关系，
        “整体”负责“部分”的生命周期，他们之间是共生共死的；并且“部分”单独存在时没有任何意义。部分脱离整体是无法单独存在的

    app包
        com.wn34.app.Main:
            程序的入口:只放main方法
    view包
        com.wn34.view.MainView
            单机游戏
            网络对战
            游戏设置
            退出游戏
        PveView         ->单机游戏界面
        PvPView         ->网络对战界面
        GameSettingView ->游戏设置界面
    pane包
        上面View的内容由pane决定
    control包
        点击事件处理代码
    utils包 : 放代码中需要在不同地方使用的内容.工具类一般是单例的,或者选择用静态方法的方式来访问(偷懒!!)
        FiveChessUtils.class
            1.判断棋子是否越界
            2.判断当前点是否已经存在棋子
            3.判断游戏的输赢
            4.清空棋盘

    bean包 :    实体包放五子棋实例
        每次落子都需要一个棋子对象与之对应。棋子对象具有共性：
            1.落子的位置 x和y
            2.落子的颜色


    --- 扩展
    ai包
        和ai相关的都放在这里!






















